# Script de test de la logique de cumul des m√©triques
$baseUrl = "http://localhost:8081/api/metrics"

Write-Host "üßÆ Test de la logique de CUMUL des m√©triques" -ForegroundColor Green
Write-Host "================================================" -ForegroundColor Green

# Test 1: Supprimer les m√©triques existantes pour MASTERCARD (clean start)
Write-Host "`nüóëÔ∏è 1. Nettoyage des m√©triques MASTERCARD:" -ForegroundColor Yellow
try {
    Invoke-RestMethod -Uri "$baseUrl/MASTERCARD" -Method DELETE
    Write-Host "‚úÖ M√©triques MASTERCARD supprim√©es" -ForegroundColor Green
} catch {
    Write-Host "‚ÑπÔ∏è Aucune m√©trique MASTERCARD √† supprimer" -ForegroundColor Cyan
}

# Test 2: Premi√®re collecte pour MASTERCARD REFUND (100ms)
Write-Host "`nüìä 2. Premi√®re collecte - MASTERCARD REFUND (100ms):" -ForegroundColor Yellow
try {
    $collectParams1 = @{
        typeCarte = "MASTERCARD"
        operationType = "REFUND" 
        executionTime = 100
    }
    $response = Invoke-RestMethod -Uri "$baseUrl/collect" -Method POST -Body $collectParams1
    Write-Host "‚úÖ $response" -ForegroundColor Green
    
    # V√©rifier le r√©sultat
    $metrics = Invoke-RestMethod -Uri "$baseUrl/MASTERCARD" -Method GET
    Write-Host "üìà R√©sultat apr√®s 1√®re collecte:" -ForegroundColor Cyan
    $metrics.metrics | ForEach-Object { 
        Write-Host "  - $($_.name): $($_.value) ($($_.type))" -ForegroundColor White
    }
} catch {
    Write-Host "‚ùå Erreur: $($_.Exception.Message)" -ForegroundColor Red
}

# Test 3: Deuxi√®me collecte pour MASTERCARD REFUND (200ms)
Write-Host "`nüìä 3. Deuxi√®me collecte - MASTERCARD REFUND (200ms):" -ForegroundColor Yellow
try {
    $collectParams2 = @{
        typeCarte = "MASTERCARD"
        operationType = "REFUND" 
        executionTime = 200
    }
    $response = Invoke-RestMethod -Uri "$baseUrl/collect" -Method POST -Body $collectParams2
    Write-Host "‚úÖ $response" -ForegroundColor Green
    
    # V√©rifier le r√©sultat
    $metrics = Invoke-RestMethod -Uri "$baseUrl/MASTERCARD" -Method GET
    Write-Host "üìà R√©sultat apr√®s 2√®me collecte:" -ForegroundColor Cyan
    $metrics.metrics | ForEach-Object { 
        Write-Host "  - $($_.name): $($_.value) ($($_.type))" -ForegroundColor White
    }
} catch {
    Write-Host "‚ùå Erreur: $($_.Exception.Message)" -ForegroundColor Red
}

# Test 4: Troisi√®me collecte pour MASTERCARD REFUND (125ms)
Write-Host "`nüìä 4. Troisi√®me collecte - MASTERCARD REFUND (125ms):" -ForegroundColor Yellow
try {
    $collectParams3 = @{
        typeCarte = "MASTERCARD"
        operationType = "REFUND" 
        executionTime = 125
    }
    $response = Invoke-RestMethod -Uri "$baseUrl/collect" -Method POST -Body $collectParams3
    Write-Host "‚úÖ $response" -ForegroundColor Green
    
    # V√©rifier le r√©sultat final
    $metrics = Invoke-RestMethod -Uri "$baseUrl/MASTERCARD" -Method GET
    Write-Host "üìà R√©sultat FINAL apr√®s 3 collectes:" -ForegroundColor Cyan
    $metrics.metrics | ForEach-Object { 
        Write-Host "  - $($_.name): $($_.value) ($($_.type))" -ForegroundColor White
    }
} catch {
    Write-Host "‚ùå Erreur: $($_.Exception.Message)" -ForegroundColor Red
}

# Test 5: Validation des calculs attendus
Write-Host "`n‚úÖ 5. Validation des r√©sultats attendus:" -ForegroundColor Yellow
Write-Host "  üìä Valeurs attendues pour MASTERCARD REFUND:" -ForegroundColor Cyan
Write-Host "    - Number: 3 (nombre de transactions)" -ForegroundColor White
Write-Host "    - Average: 141.67 ((100+200+125)/3)" -ForegroundColor White
Write-Host "    - Max: 200 (maximum)" -ForegroundColor White
Write-Host "    - Min: 100 (minimum)" -ForegroundColor White

# Test 6: Test avec un autre type d'op√©ration
Write-Host "`nüìä 6. Test avec PAYMENT sur MASTERCARD:" -ForegroundColor Yellow
try {
    $collectParams4 = @{
        typeCarte = "MASTERCARD"
        operationType = "PAYMENT" 
        executionTime = 50
    }
    $response = Invoke-RestMethod -Uri "$baseUrl/collect" -Method POST -Body $collectParams4
    Write-Host "‚úÖ $response" -ForegroundColor Green
    
    # V√©rifier le r√©sultat avec les deux types d'op√©ration
    $metrics = Invoke-RestMethod -Uri "$baseUrl/MASTERCARD" -Method GET
    Write-Host "üìà R√©sultat avec REFUND + PAYMENT:" -ForegroundColor Cyan
    $refundMetrics = $metrics.metrics | Where-Object { $_.type -eq "REFUND" }
    $paymentMetrics = $metrics.metrics | Where-Object { $_.type -eq "PAYMENT" }
    
    Write-Host "  üîÑ REFUND m√©triques:" -ForegroundColor Yellow
    $refundMetrics | ForEach-Object { 
        Write-Host "    - $($_.name): $($_.value)" -ForegroundColor White
    }
    
    Write-Host "  üí≥ PAYMENT m√©triques:" -ForegroundColor Yellow
    $paymentMetrics | ForEach-Object { 
        Write-Host "    - $($_.name): $($_.value)" -ForegroundColor White
    }
} catch {
    Write-Host "‚ùå Erreur: $($_.Exception.Message)" -ForegroundColor Red
}

Write-Host "`nüéâ Tests de cumul termin√©s!" -ForegroundColor Green